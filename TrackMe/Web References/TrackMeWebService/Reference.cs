// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Xamarin.TrackMe.TrackMeWebService {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="LocationServiceSoap", Namespace="http://tempuri.org/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LocationService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetActiveSharesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateLocationShareOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublicShareInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrackedSharesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterTrackerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrackerInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTrackerStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTargetPositionOperationCompleted;
        
        public LocationService() {
            this.Url = "http://127.0.0.1:8080/LocationService.asmx";
        }
        
        public LocationService(string url) {
            this.Url = url;
        }
        
        public event GetActiveSharesCompletedEventHandler GetActiveSharesCompleted;
        
        public event CreateLocationShareCompletedEventHandler CreateLocationShareCompleted;
        
        public event GetPublicShareInfoCompletedEventHandler GetPublicShareInfoCompleted;
        
        public event GetTrackedSharesCompletedEventHandler GetTrackedSharesCompleted;
        
        public event RegisterTrackerCompletedEventHandler RegisterTrackerCompleted;
        
        public event GetTrackerInfoCompletedEventHandler GetTrackerInfoCompleted;
        
        public event SetTrackerStatusCompletedEventHandler SetTrackerStatusCompleted;
        
        public event UpdateTargetPositionCompletedEventHandler UpdateTargetPositionCompleted;
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActiveShares", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public LocationShare[] GetActiveShares(string userId) {
            object[] results = this.Invoke("GetActiveShares", new object[] {
                        userId});
            return ((LocationShare[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetActiveShares(string userId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActiveShares", new object[] {
                        userId}, callback, asyncState);
        }
        
        public LocationShare[] EndGetActiveShares(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LocationShare[])(results[0]));
        }
        
        public void GetActiveSharesAsync(string userId) {
            this.GetActiveSharesAsync(userId, null);
        }
        
        public void GetActiveSharesAsync(string userId, object userState) {
            if ((this.GetActiveSharesOperationCompleted == null)) {
                this.GetActiveSharesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveSharesCompleted);
            }
            this.InvokeAsync("GetActiveShares", new object[] {
                        userId}, this.GetActiveSharesOperationCompleted, userState);
        }
        
        private void OnGetActiveSharesCompleted(object arg) {
            if ((this.GetActiveSharesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveSharesCompleted(this, new GetActiveSharesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateLocationShare", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public LocationShare CreateLocationShare(UserInfo user, ShareSettings settings) {
            object[] results = this.Invoke("CreateLocationShare", new object[] {
                        user,
                        settings});
            return ((LocationShare)(results[0]));
        }
        
        public System.IAsyncResult BeginCreateLocationShare(UserInfo user, ShareSettings settings, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateLocationShare", new object[] {
                        user,
                        settings}, callback, asyncState);
        }
        
        public LocationShare EndCreateLocationShare(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LocationShare)(results[0]));
        }
        
        public void CreateLocationShareAsync(UserInfo user, ShareSettings settings) {
            this.CreateLocationShareAsync(user, settings, null);
        }
        
        public void CreateLocationShareAsync(UserInfo user, ShareSettings settings, object userState) {
            if ((this.CreateLocationShareOperationCompleted == null)) {
                this.CreateLocationShareOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateLocationShareCompleted);
            }
            this.InvokeAsync("CreateLocationShare", new object[] {
                        user,
                        settings}, this.CreateLocationShareOperationCompleted, userState);
        }
        
        private void OnCreateLocationShareCompleted(object arg) {
            if ((this.CreateLocationShareCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateLocationShareCompleted(this, new CreateLocationShareCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPublicShareInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public PublicLocationShare GetPublicShareInfo(string shareId) {
            object[] results = this.Invoke("GetPublicShareInfo", new object[] {
                        shareId});
            return ((PublicLocationShare)(results[0]));
        }
        
        public System.IAsyncResult BeginGetPublicShareInfo(string shareId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPublicShareInfo", new object[] {
                        shareId}, callback, asyncState);
        }
        
        public PublicLocationShare EndGetPublicShareInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PublicLocationShare)(results[0]));
        }
        
        public void GetPublicShareInfoAsync(string shareId) {
            this.GetPublicShareInfoAsync(shareId, null);
        }
        
        public void GetPublicShareInfoAsync(string shareId, object userState) {
            if ((this.GetPublicShareInfoOperationCompleted == null)) {
                this.GetPublicShareInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublicShareInfoCompleted);
            }
            this.InvokeAsync("GetPublicShareInfo", new object[] {
                        shareId}, this.GetPublicShareInfoOperationCompleted, userState);
        }
        
        private void OnGetPublicShareInfoCompleted(object arg) {
            if ((this.GetPublicShareInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublicShareInfoCompleted(this, new GetPublicShareInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTrackedShares", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public TrackedShare[] GetTrackedShares(string userId) {
            object[] results = this.Invoke("GetTrackedShares", new object[] {
                        userId});
            return ((TrackedShare[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetTrackedShares(string userId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTrackedShares", new object[] {
                        userId}, callback, asyncState);
        }
        
        public TrackedShare[] EndGetTrackedShares(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TrackedShare[])(results[0]));
        }
        
        public void GetTrackedSharesAsync(string userId) {
            this.GetTrackedSharesAsync(userId, null);
        }
        
        public void GetTrackedSharesAsync(string userId, object userState) {
            if ((this.GetTrackedSharesOperationCompleted == null)) {
                this.GetTrackedSharesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrackedSharesCompleted);
            }
            this.InvokeAsync("GetTrackedShares", new object[] {
                        userId}, this.GetTrackedSharesOperationCompleted, userState);
        }
        
        private void OnGetTrackedSharesCompleted(object arg) {
            if ((this.GetTrackedSharesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrackedSharesCompleted(this, new GetTrackedSharesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterTracker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public TrackedShare RegisterTracker(string publicShareId, UserInfo trackerInfo) {
            object[] results = this.Invoke("RegisterTracker", new object[] {
                        publicShareId,
                        trackerInfo});
            return ((TrackedShare)(results[0]));
        }
        
        public System.IAsyncResult BeginRegisterTracker(string publicShareId, UserInfo trackerInfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RegisterTracker", new object[] {
                        publicShareId,
                        trackerInfo}, callback, asyncState);
        }
        
        public TrackedShare EndRegisterTracker(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TrackedShare)(results[0]));
        }
        
        public void RegisterTrackerAsync(string publicShareId, UserInfo trackerInfo) {
            this.RegisterTrackerAsync(publicShareId, trackerInfo, null);
        }
        
        public void RegisterTrackerAsync(string publicShareId, UserInfo trackerInfo, object userState) {
            if ((this.RegisterTrackerOperationCompleted == null)) {
                this.RegisterTrackerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterTrackerCompleted);
            }
            this.InvokeAsync("RegisterTracker", new object[] {
                        publicShareId,
                        trackerInfo}, this.RegisterTrackerOperationCompleted, userState);
        }
        
        private void OnRegisterTrackerCompleted(object arg) {
            if ((this.RegisterTrackerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterTrackerCompleted(this, new RegisterTrackerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTrackerInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public UserInfo GetTrackerInfo(string privateShareId, string trackerId) {
            object[] results = this.Invoke("GetTrackerInfo", new object[] {
                        privateShareId,
                        trackerId});
            return ((UserInfo)(results[0]));
        }
        
        public System.IAsyncResult BeginGetTrackerInfo(string privateShareId, string trackerId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTrackerInfo", new object[] {
                        privateShareId,
                        trackerId}, callback, asyncState);
        }
        
        public UserInfo EndGetTrackerInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UserInfo)(results[0]));
        }
        
        public void GetTrackerInfoAsync(string privateShareId, string trackerId) {
            this.GetTrackerInfoAsync(privateShareId, trackerId, null);
        }
        
        public void GetTrackerInfoAsync(string privateShareId, string trackerId, object userState) {
            if ((this.GetTrackerInfoOperationCompleted == null)) {
                this.GetTrackerInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrackerInfoCompleted);
            }
            this.InvokeAsync("GetTrackerInfo", new object[] {
                        privateShareId,
                        trackerId}, this.GetTrackerInfoOperationCompleted, userState);
        }
        
        private void OnGetTrackerInfoCompleted(object arg) {
            if ((this.GetTrackerInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrackerInfoCompleted(this, new GetTrackerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetTrackerStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void SetTrackerStatus(string privateShareId, string trackerId, bool allowTracking) {
            this.Invoke("SetTrackerStatus", new object[] {
                        privateShareId,
                        trackerId,
                        allowTracking});
        }
        
        public System.IAsyncResult BeginSetTrackerStatus(string privateShareId, string trackerId, bool allowTracking, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetTrackerStatus", new object[] {
                        privateShareId,
                        trackerId,
                        allowTracking}, callback, asyncState);
        }
        
        public void EndSetTrackerStatus(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void SetTrackerStatusAsync(string privateShareId, string trackerId, bool allowTracking) {
            this.SetTrackerStatusAsync(privateShareId, trackerId, allowTracking, null);
        }
        
        public void SetTrackerStatusAsync(string privateShareId, string trackerId, bool allowTracking, object userState) {
            if ((this.SetTrackerStatusOperationCompleted == null)) {
                this.SetTrackerStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTrackerStatusCompleted);
            }
            this.InvokeAsync("SetTrackerStatus", new object[] {
                        privateShareId,
                        trackerId,
                        allowTracking}, this.SetTrackerStatusOperationCompleted, userState);
        }
        
        private void OnSetTrackerStatusCompleted(object arg) {
            if ((this.SetTrackerStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTrackerStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTargetPosition", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void UpdateTargetPosition(string privateShareId, float longitude, float latitude) {
            this.Invoke("UpdateTargetPosition", new object[] {
                        privateShareId,
                        longitude,
                        latitude});
        }
        
        public System.IAsyncResult BeginUpdateTargetPosition(string privateShareId, float longitude, float latitude, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateTargetPosition", new object[] {
                        privateShareId,
                        longitude,
                        latitude}, callback, asyncState);
        }
        
        public void EndUpdateTargetPosition(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void UpdateTargetPositionAsync(string privateShareId, float longitude, float latitude) {
            this.UpdateTargetPositionAsync(privateShareId, longitude, latitude, null);
        }
        
        public void UpdateTargetPositionAsync(string privateShareId, float longitude, float latitude, object userState) {
            if ((this.UpdateTargetPositionOperationCompleted == null)) {
                this.UpdateTargetPositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTargetPositionCompleted);
            }
            this.InvokeAsync("UpdateTargetPosition", new object[] {
                        privateShareId,
                        longitude,
                        latitude}, this.UpdateTargetPositionOperationCompleted, userState);
        }
        
        private void OnUpdateTargetPositionCompleted(object arg) {
            if ((this.UpdateTargetPositionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTargetPositionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class LocationShare {
        
        /// <remarks/>
        public string PrivateId;
        
        /// <remarks/>
        public string PublicId;
        
        /// <remarks/>
        public float Longitude;
        
        /// <remarks/>
        public float Latitude;
        
        /// <remarks/>
        public UserInfo User;
        
        /// <remarks/>
        public ShareSettings ShareSettings;
        
        /// <remarks/>
        public System.DateTime SharedTime;
        
        /// <remarks/>
        public System.DateTime ExpireTime;
        
        /// <remarks/>
        public UserInfo[] Trackers;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class UserInfo {
        
        /// <remarks/>
        public string PrivateId;
        
        /// <remarks/>
        public string Id;
        
        /// <remarks/>
        public string RegistrationId;
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public byte[] Icon;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ShareSettings {
        
        /// <remarks/>
        public int TimeoutMinutes;
        
        /// <remarks/>
        public bool CancelOnArrival;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class PublicLocationShare {
        
        /// <remarks/>
        public string Id;
        
        /// <remarks/>
        public float Longitude;
        
        /// <remarks/>
        public float Latitude;
        
        /// <remarks/>
        public UserInfo User;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class TrackedShare {
        
        /// <remarks/>
        public string Id;
        
        /// <remarks/>
        public string TrackerId;
        
        /// <remarks/>
        public float Longitude;
        
        /// <remarks/>
        public float Latitude;
        
        /// <remarks/>
        public UserInfo User;
    }
    
    public partial class GetActiveSharesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveSharesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LocationShare[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LocationShare[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetActiveSharesCompletedEventHandler(object sender, GetActiveSharesCompletedEventArgs args);
    
    public partial class CreateLocationShareCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateLocationShareCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LocationShare Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LocationShare)(this.results[0]));
            }
        }
    }
    
    public delegate void CreateLocationShareCompletedEventHandler(object sender, CreateLocationShareCompletedEventArgs args);
    
    public partial class GetPublicShareInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPublicShareInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public PublicLocationShare Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PublicLocationShare)(this.results[0]));
            }
        }
    }
    
    public delegate void GetPublicShareInfoCompletedEventHandler(object sender, GetPublicShareInfoCompletedEventArgs args);
    
    public partial class GetTrackedSharesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrackedSharesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TrackedShare[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TrackedShare[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetTrackedSharesCompletedEventHandler(object sender, GetTrackedSharesCompletedEventArgs args);
    
    public partial class RegisterTrackerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterTrackerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TrackedShare Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TrackedShare)(this.results[0]));
            }
        }
    }
    
    public delegate void RegisterTrackerCompletedEventHandler(object sender, RegisterTrackerCompletedEventArgs args);
    
    public partial class GetTrackerInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrackerInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public UserInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserInfo)(this.results[0]));
            }
        }
    }
    
    public delegate void GetTrackerInfoCompletedEventHandler(object sender, GetTrackerInfoCompletedEventArgs args);
    
    public delegate void SetTrackerStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public delegate void UpdateTargetPositionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
}
